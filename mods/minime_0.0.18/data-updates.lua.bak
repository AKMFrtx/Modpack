local minime = require("__minime__/common")("minime")

-- Get scale factor and convert from percent to fraction
local scale_factor = settings.startup["minime_character-size"].value/100

-- Apply scale_factor to both parts of a vector or position. We don't want
-- to mess with other mods, so we return the scaled position in the original
-- format (dictionary: {x = 1, y = 1}, or array: {1, 1}).
local function scale_position(position, hr)
    -- Make sure position is in correct format

    position = position or { x = 0, y = 0}
    if type(position) ~= "table" or table_size(position) ~= 2 then
        error(serpent.line(position) .. " is not a valid position!")
    end

    -- Is this for the HR version?
    hr = hr and 1/scale_factor or 1

    local x = (position.x or position[1]) * scale_factor * hr
    local y = (position.y or position[2]) * scale_factor * hr

    return (position.x and position.y) and { x = x, y = y} or {x, y}
end

--------------------------------------------------------------------------------
-- Change corpses
--------------------------------------------------------------------------------
for c, corpse in pairs(data.raw["character-corpse"]) do

minime.dprint("Scaling corpse " .. tostring(corpse.name) .. " (factor: " .. scale_factor .. ")")
    -- Adjust size of different boxes
    local box = corpse.selection_box
    if box then
      corpse.selection_box = { scale_position(box[1]), scale_position(box[2]) }
    end
log("corpse = " .. c)
if picture then
    -- Apply scale_factor to corpse
    for p, picture in pairs(corpse.pictures) do
        -- Picture contains layers
        if layer then
          for l, layer in pairs(picture.layers) do
              if not layer.scaled then
                  -- Set scale (defaults to 1 if not explicitly set)
                  layer.scale = (layer.scale or 1) * scale_factor
                  if layer.hr_version then
                    layer.hr_version.scale = (layer.hr_version.scale or 1) * scale_factor
                  end

                  -- Set shift
                  layer.shift = scale_position(layer.shift)
                  if layer.hr_version then
                    layer.hr_version.shift = scale_position(layer.shift, "HR")
                  end

                  -- Mark picture as scaled -- otherwise it will be scaled each time it's used!
                  layer.scaled = true
              end
          end
        -- Picture is a sprite sheet
        elseif not scaled then
          scale = (scale or 1) * scale_factor
          if hr_version then
            hr_version.scale = (hr_version.scale or 1) * scale_factor
          end
          shift = scale_position(shift)
          if hr_version then
            hr_version.shift = scale_position(layer.shift, "HR")
          end

          -- Mark picture as scaled -- otherwise it will be scaled each time it's used!
          scaled = true
        end
    end
end
end

-- animation_list contains the names of mandatory+optional animations.
-- There's another property (armors), and other mods may add their own private properties,
-- so using a list instead of iterating through all values we find will be safer.
local animation_list = {
    "idle",
    "idle_with_gun",
    "running",
    "running_with_gun",
    "mining_with_tool",
    "flipped_shadow_running_with_gun"
}


--------------------------------------------------------------------------------
-- Change characters
--------------------------------------------------------------------------------
for c, character in pairs(data.raw["character"]) do

    minime.dprint("Scaling character " .. tostring(character.name) .. " (factor: " .. scale_factor .. ")")

    -- Adjust size of different boxes
    local box = character.selection_box
    if box then
      character.selection_box = { scale_position(box[1]), scale_position(box[2]) }
    end

    box = character.sticker_box
    if box then
      character.sticker_box = { scale_position(box[1]), scale_position(box[2]) }
    end

    -- Collision box of character should always be minimal so we can move it everywhere!
    character.collision_box = {{-0.1, -0.1}, {0.1, 0.1}}

    -- Apply scale_factor to character
    for _, armor_level in ipairs(character.animations) do
        for a, animation in pairs(animation_list) do
            animation = armor_level[animation] or {}
            for p, picture in ipairs(animation.layers or {}) do
                if not picture.scaled then
                    -- Set scale (defaults to 1 if not explicitly set)
                    picture.scale = (picture.scale or 1) * scale_factor
                    picture.hr_version.scale = (picture.hr_version.scale or 1) * scale_factor

                    -- Set shift
                    picture.shift = scale_position(picture.shift)
                    picture.hr_version.shift = scale_position(picture.shift, "HR")

                    -- Mark picture as scaled -- otherwise it will be scaled each time it's used!
                    picture.scaled = true
                end
            end
        end
    end
end
